////Given quesion ans in using PHP  
<?php

function maximumWeightDifference($items, $k) {
    sort($items); // Sort the items in ascending order of weights
    
    $chefItems = array_slice($items, $k); // Chef carries the heavier group
    $sonItems = array_slice($items, 0, $k); // Son carries the lighter group
    
    $chefWeight = array_sum($chefItems); // Calculate the total weight carried by the chef
    $sonWeight = array_sum($sonItems); // Calculate the total weight carried by the son
    
    return $chefWeight - $sonWeight; // Calculate the maximum possible weight difference
}

// Example test cases
$testCases = [
    [[8, 4, 5, 2, 10], 2], // Expected output: 17
    [[1, 1, 1, 1, 1, 1, 1], 3] // Expected output: 2
];

foreach ($testCases as $testCase) {
    $items = $testCase[0];
    $k = $testCase[1];
    
    $difference = maximumWeightDifference($items, $k);
    echo "Maximum possible difference: $difference grams\n";

}

//Given quesion ans in using c language 

#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int*)b - *(int*)a); // Sort in descending order
}

int maximumWeightDifference(int items[], int size, int k) {
    qsort(items, size, sizeof(int), compare); // Sort the items in descending order of weights
    
    int chefWeight = 0;
    int sonWeight = 0;
    
    for (int i = 0; i < size; i++) {
        if (i < k) {
            sonWeight += items[i]; // Calculate the total weight carried by the son
        } else {
            chefWeight += items[i]; // Calculate the total weight carried by the chef
        }
    }
    
    return chefWeight - sonWeight; // Calculate the maximum possible weight difference
}

int main() {
    int T;
    scanf("%d", &T); // Read the number of test cases
    
    while (T--) {
        int N, K;
        scanf("%d %d", &N, &K); // Read N and K for each test case
        
        int *items = (int *)malloc(N * sizeof(int)); // Allocate memory for items
        
        for (int i = 0; i < N; i++) {
            scanf("%d", &items[i]); // Read the item weights
        }
        
        int difference = maximumWeightDifference(items, N, K);
        printf("%d\n", difference); // Print the maximum possible weight difference
        
        free(items); // Free the dynamically allocated memory
    }
    
    return 0;
}




